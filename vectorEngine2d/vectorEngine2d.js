var VectorEngine2d = function(canvas, contentPath) {    this.renderManager = new RenderManager(canvas);    this.inputManager = new InputManager({});    this.sceneManager = new SceneManager(this);    this.resourceManager = new ResourceManager(contentPath);    this.lastTime;    this.curTime;    this.sceneManager.loadScene(new Level(this, 0));}; // Execute logicVectorEngine2d.prototype.update = function() {    this.sceneManager.update();};// Draw to the screenVectorEngine2d.prototype.draw = function() {    this.renderManager.smoothImageScaling(false);    this.renderManager.clear("#141414");    this.sceneManager.draw();        this.renderManager.drawingCanvasContext.save();    this.renderManager.drawingCanvasContext.drawImage(        this.renderManager.canvas, 0, 0,         this.renderManager.drawingCanvas.width,         this.renderManager.drawingCanvas.height    );    this.renderManager.drawingCanvasContext.restore();};VectorEngine2d.prototype.gameloop = function() {    this.update();    this.draw();    this.lastTime = this.curTime;    this.curTime = new Date().getMilliseconds();};// Create the drawing area and start the gameloopVectorEngine2d.prototype.run = function() {    var _this = this;        this.curTime = new Date().getMilliseconds();    this.lastTime = this.curTime - 1;        // Check for animation frame support    var animationFrame = window.requestAnimationFrame ||        window.webkitRequestAnimationFrame ||        window.mozRequestAnimationFrame    ||        window.oRequestAnimationFrame      ||        window.msRequestAnimationFrame     ||        null;    if (animationFrame !== null) {        var recursiveAnim = function() {            _this.gameloop();            animationFrame(recursiveAnim);        };        // start the gameloop        animationFrame(recursiveAnim);    } else {        // Old browser fall-back        setInterval(gameloop, 1000.0 / 60.0);    }};